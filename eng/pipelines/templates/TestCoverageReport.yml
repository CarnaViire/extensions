parameters:
  - name: isDeltaBuild
    type: string
  - name: repoLogPath
    type: string
  - name: testResultsPath
    type: string
  - name: testResultsFile
    type: string

steps:
  - task: PowerShell@2
    displayName: Check coverage report exists
    inputs:
      targetType: 'inline'
      script: |
        Write-Host 'isDeltaBuild: ${{ parameters.isDeltaBuild }}'
        Write-Host 'repoLogPath: ${{ parameters.repoLogPath }}'
        Write-Host 'testResultsFile: ${{ parameters.testResultsFile }}'

        if (Test-Path '${{ parameters.testResultsFile }}') {
            function Export { param($i); Write-Host "$i"; Write-Host "##$i" }
            Export "vso[task.setvariable variable=PerformCoverageCheck]True"
        }
        else {
            Write-Host "No coverage reports."
        }

  - script: $(Build.SourcesDirectory)/.dotnet/dotnet reportgenerator
            -reports:"${{ parameters.testResultsFile }}"
            -targetdir:"${{ parameters.testResultsPath }}/CoverageResultsHtml"
            -reporttypes:HtmlInline_AzurePipelines
    displayName: Generate code coverage report
    condition: and(succeeded(), eq(variables['PerformCoverageCheck'], 'True'))

  - task: PublishCodeCoverageResults@1
    displayName: Publish coverage report
    condition: and(succeeded(), eq(variables['PerformCoverageCheck'], 'True'))
    env:
      DISABLE_COVERAGE_AUTOGENERATE: 'true'
    inputs:
      codeCoverageTool: cobertura
      summaryFileLocation: '${{ parameters.testResultsFile }}'
      pathToSources: $(Build.SourcesDirectory)
      reportDirectory: '${{ parameters.testResultsPath }}/CoverageResultsHtml'

  - task: PublishBuildArtifacts@1
    displayName: Publish coverage results (cobertura.xml)
    condition: and(always(), eq(variables['PerformCoverageCheck'], 'True'))
    inputs:
      PathtoPublish: '${{ parameters.testResultsFile }}'
      PublishLocation: Container
      ArtifactName: '$(Agent.Os)_$(Agent.JobName)'
    continueOnError: true

  - task: PowerShell@2
    displayName: Check per-project coverage
    condition: and(succeeded(), ne(variables['IsDeltaBuild'], 'True'), eq(variables['PerformCoverageCheck'], 'True'))
    inputs:
      targetType: 'filePath'
      filePath: $(Build.SourcesDirectory)/scripts/ValidateProjectCoverage.ps1
      arguments: >
        -CoberturaReportXml '${{ parameters.testResultsFile }}'

  - task: PowerShell@2
    displayName: âˆ† Check per-project coverage
    condition: and(succeeded(), eq(variables['IsDeltaBuild'], 'True'), eq(variables['PerformCoverageCheck'], 'True'))
    inputs:
      targetType: 'inline'
      script: |
        $DeltaBuildJsonFile = '${{ parameters.repoLogPath }}\DeltaBuild.json';
        $AffectedProjectChain = (Get-Content $DeltaBuildJsonFile | ConvertFrom-Json).AffectedProjectChain;
        $(Build.SourcesDirectory)/scripts/ValidateProjectCoverage.ps1 `
              -CoberturaReportXml '${{ parameters.testResultsFile }}' `
              -OnlyForProjects $AffectedProjectChain
