//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Extensions.LocalAnalyzers {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.Extensions.LocalAnalyzers.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a parameter of type &apos;IMeter&apos; as the first parameter to the method declaration.
        /// </summary>
        internal static string AddMissingMeterMessage {
            get {
                return ResourceManager.GetString("AddMissingMeterMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a parameter of type &apos;IMeter&apos; to the method declaration.
        /// </summary>
        internal static string AddMissingMeterTitle {
            get {
                return ResourceManager.GetString("AddMissingMeterTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Annotate experimental API.
        /// </summary>
        internal static string AnnotateExperimentalApi {
            get {
                return ResourceManager.GetString("AnnotateExperimentalApi", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using the &apos;Count&apos; or &apos;Length&apos; properties to determine if a collection is empty is considerably more efficient than using the &apos;Any&apos; LINQ method.
        /// </summary>
        internal static string AnyDescription {
            get {
                return ResourceManager.GetString("AnyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the &apos;{0}&apos; property instead of the &apos;Any&apos; method for improved performance.
        /// </summary>
        internal static string AnyMessage {
            get {
                return ResourceManager.GetString("AnyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the &apos;Count&apos; or &apos;Length&apos; properties instead of the &apos;Any&apos; method for improved performance.
        /// </summary>
        internal static string AnyTitle {
            get {
                return ResourceManager.GetString("AnyTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dictionaries and sets which use enums and bytes as keys can often be replaced with simple arrays for improved performance.
        /// </summary>
        internal static string ArraysDescription {
            get {
                return ResourceManager.GetString("ArraysDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consider using &apos;{0}?[]&apos; instead of &apos;{1}&apos;.
        /// </summary>
        internal static string ArraysMessage {
            get {
                return ResourceManager.GetString("ArraysMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consider using an array instead of a collection.
        /// </summary>
        internal static string ArraysTitle {
            get {
                return ResourceManager.GetString("ArraysTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When skipping the await keyword for asynchronous operations inside a using block, then a disposable object could be disposed before the asynchronous invocation finishes. This might result in incorrect behavior and very often ends with a runtime exception notifying that the code is trying to operate on a disposed object..
        /// </summary>
        internal static string AsyncCallInsideUsingBlockDescription {
            get {
                return ResourceManager.GetString("AsyncCallInsideUsingBlockDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Async call should be awaited before leaving the &apos;using&apos; block.
        /// </summary>
        internal static string AsyncCallInsideUsingBlockMessage {
            get {
                return ResourceManager.GetString("AsyncCallInsideUsingBlockMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fire-and-forget async call inside a &apos;using&apos; block.
        /// </summary>
        internal static string AsyncCallInsideUsingBlockTitle {
            get {
                return ResourceManager.GetString("AsyncCallInsideUsingBlockTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Accepting a CancellationToken as a parameter allows caller to express a loss of interest in the result enabling the method to save cycles by finishing early.
        /// </summary>
        internal static string AsyncMethodWithoutCancellationDescription {
            get {
                return ResourceManager.GetString("AsyncMethodWithoutCancellationDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add CancellationToken as the parameter of asynchronous method.
        /// </summary>
        internal static string AsyncMethodWithoutCancellationMessage {
            get {
                return ResourceManager.GetString("AsyncMethodWithoutCancellationMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The async method doesn&apos;t support cancellation.
        /// </summary>
        internal static string AsyncMethodWithoutCancellationTitle {
            get {
                return ResourceManager.GetString("AsyncMethodWithoutCancellationTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modern .NET code should avoid blocking I/O calls since they substantially impact performance.
        /// </summary>
        internal static string BlockingCallDescription {
            get {
                return ResourceManager.GetString("BlockingCallDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use asynchronous operations instead of legacy thread blocking code.
        /// </summary>
        internal static string BlockingCallMessage {
            get {
                return ResourceManager.GetString("BlockingCallMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use asynchronous operations instead of legacy thread blocking code.
        /// </summary>
        internal static string BlockingCallTitle {
            get {
                return ResourceManager.GetString("BlockingCallTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using the null coalescing assignment operator (??=) with values which are statically known not to be null causes superfluous null checks to be performed at runtime.
        /// </summary>
        internal static string CoalesceAssignmentDescription {
            get {
                return ResourceManager.GetString("CoalesceAssignmentDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consider removing unnecessary null coalescing assignment (??=) since the target value is statically known not to be null.
        /// </summary>
        internal static string CoalesceAssignmentMessage {
            get {
                return ResourceManager.GetString("CoalesceAssignmentMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consider removing unnecessary null coalescing assignment (??=).
        /// </summary>
        internal static string CoalesceAssignmentTitle {
            get {
                return ResourceManager.GetString("CoalesceAssignmentTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using the null coalescing operator (??) with values which are statically known to be null causes superfluous null checks to be performed at runtime.
        /// </summary>
        internal static string CoalesceDescription {
            get {
                return ResourceManager.GetString("CoalesceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consider removing unnecessary null coalescing (??) since the left-hand value is statically known not to be null.
        /// </summary>
        internal static string CoalesceMessage {
            get {
                return ResourceManager.GetString("CoalesceMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consider removing unnecessary null coalescing operator (??).
        /// </summary>
        internal static string CoalesceTitle {
            get {
                return ResourceManager.GetString("CoalesceTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using the conditional access operator (?) to access values which are statically known not to be null causes superfluous null checks to be performed at runtime.
        /// </summary>
        internal static string ConditionalAccessDescription {
            get {
                return ResourceManager.GetString("ConditionalAccessDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consider removing unnecessary conditional access operator (?) since the value is statically known not to be null.
        /// </summary>
        internal static string ConditionalAccessMessage {
            get {
                return ResourceManager.GetString("ConditionalAccessMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consider removing unnecessary conditional access operator (?).
        /// </summary>
        internal static string ConditionalAccessTitle {
            get {
                return ResourceManager.GetString("ConditionalAccessTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Symbols that have been removed from the public API of an assembly must be marked as obsolete.
        /// </summary>
        internal static string DeprecatedSymbolsMustBeMarkedObsoleteDescription {
            get {
                return ResourceManager.GetString("DeprecatedSymbolsMustBeMarkedObsoleteDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deprecated symbol &apos;{0}&apos; must be annotated as obsolete.
        /// </summary>
        internal static string DeprecatedSymbolsMustBeMarkedObsoleteMessage {
            get {
                return ResourceManager.GetString("DeprecatedSymbolsMustBeMarkedObsoleteMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deprecated symbols must be annotated as obsolete.
        /// </summary>
        internal static string DeprecatedSymbolsMustBeMarkedObsoleteTitle {
            get {
                return ResourceManager.GetString("DeprecatedSymbolsMustBeMarkedObsoleteTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Calls to &apos;IDistributedCache.Get/GetAsync&apos; can be replaced with faster alternatives from &apos;IExtendedDistributedCache&apos;.
        /// </summary>
        internal static string DistributedCacheDescription {
            get {
                return ResourceManager.GetString("DistributedCacheDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Calls to &apos;IDistributedCache.Get/GetAsync&apos; can be replaced with faster alternatives from &apos;IExtendedDistributedCache&apos;.
        /// </summary>
        internal static string DistributedCacheMessage {
            get {
                return ResourceManager.GetString("DistributedCacheMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use higher performance methods from &apos;IExtendedDistributedCache&apos;.
        /// </summary>
        internal static string DistributedCacheTitle {
            get {
                return ResourceManager.GetString("DistributedCacheTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace uses of &apos;Enum.GetName&apos; and &apos;Enum.ToString&apos; for improved performance.
        /// </summary>
        internal static string EnumStringsDescription {
            get {
                return ResourceManager.GetString("EnumStringsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use {0} instead of &apos;{1}&apos; for improved performance.
        /// </summary>
        internal static string EnumStringsMessage {
            get {
                return ResourceManager.GetString("EnumStringsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace uses of &apos;Enum.GetName&apos; and &apos;Enum.ToString&apos; for improved performance.
        /// </summary>
        internal static string EnumStringsTitle {
            get {
                return ResourceManager.GetString("EnumStringsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Symbols being added to the public API of an assembly cannot be marked as obsolete.
        /// </summary>
        internal static string ExperimentalSymbolsCantBeMarkedObsoleteDescription {
            get {
                return ResourceManager.GetString("ExperimentalSymbolsCantBeMarkedObsoleteDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Experimental symbol &apos;{0}&apos; cannot be marked as obsolete.
        /// </summary>
        internal static string ExperimentalSymbolsCantBeMarkedObsoleteMessage {
            get {
                return ResourceManager.GetString("ExperimentalSymbolsCantBeMarkedObsoleteMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Experimental symbols cannot be marked as obsolete.
        /// </summary>
        internal static string ExperimentalSymbolsCantBeMarkedObsoleteTitle {
            get {
                return ResourceManager.GetString("ExperimentalSymbolsCantBeMarkedObsoleteTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generate or update the metric method.
        /// </summary>
        internal static string GenerateOrUpdateMetricMethod {
            get {
                return ResourceManager.GetString("GenerateOrUpdateMetricMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generate a strongly-typed logging method.
        /// </summary>
        internal static string GenerateStronglyTypedLoggingMethod {
            get {
                return ResourceManager.GetString("GenerateStronglyTypedLoggingMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using generic collections can avoid boxing overhead and provides strong typing.
        /// </summary>
        internal static string LegacyCollectionDescription {
            get {
                return ResourceManager.GetString("LegacyCollectionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use generic collections instead of legacy collections for improved performance.
        /// </summary>
        internal static string LegacyCollectionMessage {
            get {
                return ResourceManager.GetString("LegacyCollectionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use generic collections instead of legacy collections for improved performance.
        /// </summary>
        internal static string LegacyCollectionTitle {
            get {
                return ResourceManager.GetString("LegacyCollectionTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifies calls to legacy logging methods.
        /// </summary>
        internal static string LegacyLoggingDescription {
            get {
                return ResourceManager.GetString("LegacyLoggingDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use source generated logging methods for improved performance.
        /// </summary>
        internal static string LegacyLoggingMessage {
            get {
                return ResourceManager.GetString("LegacyLoggingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use source generated logging methods for improved performance.
        /// </summary>
        internal static string LegacyLoggingTitle {
            get {
                return ResourceManager.GetString("LegacyLoggingTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Arrays of literal values should generally be assigned to static fields in order to avoid creating them redundantly over time.
        /// </summary>
        internal static string MakeArrayStaticDescription {
            get {
                return ResourceManager.GetString("MakeArrayStaticDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assign array of literal values to a static field for improved performance.
        /// </summary>
        internal static string MakeArrayStaticMessage {
            get {
                return ResourceManager.GetString("MakeArrayStaticMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assign array of literal values to a static field for improved performance.
        /// </summary>
        internal static string MakeArrayStaticTitle {
            get {
                return ResourceManager.GetString("MakeArrayStaticTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Making an executable&apos;s types internal enables dead code analysis along with other potential optimizations.
        /// </summary>
        internal static string MakeExeTypesInternalDescription {
            get {
                return ResourceManager.GetString("MakeExeTypesInternalDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make type &apos;{0}&apos; internal since it is declared in an executable.
        /// </summary>
        internal static string MakeExeTypesInternalMessage {
            get {
                return ResourceManager.GetString("MakeExeTypesInternalMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make types declared in an executable internal.
        /// </summary>
        internal static string MakeExeTypesInternalTitle {
            get {
                return ResourceManager.GetString("MakeExeTypesInternalTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make the type internal.
        /// </summary>
        internal static string MakeTypeInternal {
            get {
                return ResourceManager.GetString("MakeTypeInternal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifies uses of &apos;System.IO.MemoryStream&apos; and recommends a better alternative.
        /// </summary>
        internal static string MemoryStreamDescription {
            get {
                return ResourceManager.GetString("MemoryStreamDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Microsoft.IO.RecyclableMemoryStream&apos; instead of &apos;System.IO.MemoryStream&apos; for improved performance.
        /// </summary>
        internal static string MemoryStreamMessage {
            get {
                return ResourceManager.GetString("MemoryStreamMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Microsoft.IO.RecyclableMemoryStream&apos; instead of &apos;System.IO.MemoryStream&apos; for improved performance.
        /// </summary>
        internal static string MemoryStreamTitle {
            get {
                return ResourceManager.GetString("MemoryStreamTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Symbols being added to the public API of an assembly must be marked as experimental until they have been appoved.
        /// </summary>
        internal static string NewSymbolsMustBeMarkedExperimentalDescription {
            get {
                return ResourceManager.GetString("NewSymbolsMustBeMarkedExperimentalDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Newly added symbol &apos;{0}&apos; must be marked as experimental.
        /// </summary>
        internal static string NewSymbolsMustBeMarkedExperimentalMessage {
            get {
                return ResourceManager.GetString("NewSymbolsMustBeMarkedExperimentalMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Newly added symbols must be marked as experimental.
        /// </summary>
        internal static string NewSymbolsMustBeMarkedExperimentalTitle {
            get {
                return ResourceManager.GetString("NewSymbolsMustBeMarkedExperimentalTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When compiling in a nullable context, the C# compiler performs null analysis at compile time so there is no need to also perform null checking at runtime.
        /// </summary>
        internal static string NullCheckDescription {
            get {
                return ResourceManager.GetString("NullCheckDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove superfluous null check when compiling in a nullable context.
        /// </summary>
        internal static string NullCheckMessage {
            get {
                return ResourceManager.GetString("NullCheckMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove superfluous null checks when compiling in a nullable context.
        /// </summary>
        internal static string NullCheckTitle {
            get {
                return ResourceManager.GetString("NullCheckTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Microsoft.R9.Extensions.Pools.PoolFactory&apos; instead for improved performance.
        /// </summary>
        internal static string ObjectPoolDescription {
            get {
                return ResourceManager.GetString("ObjectPoolDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Microsoft.R9.Extensions.Pools.PoolFactory&apos; instead of &apos;{0}&apos; for improved performance.
        /// </summary>
        internal static string ObjectPoolMessage {
            get {
                return ResourceManager.GetString("ObjectPoolMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Microsoft.R9.Extensions.Pools.PoolFactory&apos; instead for improved performance.
        /// </summary>
        internal static string ObjectPoolTitle {
            get {
                return ResourceManager.GetString("ObjectPoolTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make method partial.
        /// </summary>
        internal static string PartialMethodDeclarationMessage {
            get {
                return ResourceManager.GetString("PartialMethodDeclarationMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make method partial.
        /// </summary>
        internal static string PartialMethodDeclarationTitle {
            get {
                return ResourceManager.GetString("PartialMethodDeclarationTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make method public.
        /// </summary>
        internal static string PublicMethodDeclarationMessage {
            get {
                return ResourceManager.GetString("PublicMethodDeclarationMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make method public.
        /// </summary>
        internal static string PublicMethodDeclarationTitle {
            get {
                return ResourceManager.GetString("PublicMethodDeclarationTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Published symbols cannot be deleted to maintain compatibility.
        /// </summary>
        internal static string PublishedSymbolsCantBeDeletedDescription {
            get {
                return ResourceManager.GetString("PublishedSymbolsCantBeDeletedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Published symbol &apos;{0}&apos; cannot be deleted to maintain compatibility.
        /// </summary>
        internal static string PublishedSymbolsCantBeDeletedMessage {
            get {
                return ResourceManager.GetString("PublishedSymbolsCantBeDeletedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Published symbols cannot be deleted to maintain compatibility.
        /// </summary>
        internal static string PublishedSymbolsCantBeDeletedTitle {
            get {
                return ResourceManager.GetString("PublishedSymbolsCantBeDeletedTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Previously published symbols in the public API of an assembly cannot be marked experimental.
        /// </summary>
        internal static string PublishedSymbolsCantBeMarkedExperimentalDescription {
            get {
                return ResourceManager.GetString("PublishedSymbolsCantBeMarkedExperimentalDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Published symbol &apos;{0}&apos; cannot be marked experimental.
        /// </summary>
        internal static string PublishedSymbolsCantBeMarkedExperimentalMessage {
            get {
                return ResourceManager.GetString("PublishedSymbolsCantBeMarkedExperimentalMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Published symbols cannot be marked experimental.
        /// </summary>
        internal static string PublishedSymbolsCantBeMarkedExperimentalTitle {
            get {
                return ResourceManager.GetString("PublishedSymbolsCantBeMarkedExperimentalTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Published symbols cannot change to maintain compatibility.
        /// </summary>
        internal static string PublishedSymbolsCantChangeDescription {
            get {
                return ResourceManager.GetString("PublishedSymbolsCantChangeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Published symbols cannot be changed to maintain compatibility.
        /// </summary>
        internal static string PublishedSymbolsCantChangedTitle {
            get {
                return ResourceManager.GetString("PublishedSymbolsCantChangedTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Published symbol &apos;{0}&apos; cannot be changed to maintain compatibility.
        /// </summary>
        internal static string PublishedSymbolsCantChangeMessage {
            get {
                return ResourceManager.GetString("PublishedSymbolsCantChangeMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove method body.
        /// </summary>
        internal static string RemoveMethodBodyMessage {
            get {
                return ResourceManager.GetString("RemoveMethodBodyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove method body.
        /// </summary>
        internal static string RemoveMethodBodyTitle {
            get {
                return ResourceManager.GetString("RemoveMethodBodyTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace &apos;Any&apos; method call with property access.
        /// </summary>
        internal static string ReplaceAnyCallWithPropertyAccess {
            get {
                return ResourceManager.GetString("ReplaceAnyCallWithPropertyAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace explicit null check with call to &apos;Throws.IfNull&apos; (needs a &apos;PackageReference&apos; to &apos;Microsoft.R9.Extensions.Essentials&apos;).
        /// </summary>
        internal static string ReplaceWithStaticNullCheckMethod {
            get {
                return ResourceManager.GetString("ReplaceWithStaticNullCheckMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace explicit throw with call to &apos;Throws&apos; (needs a &apos;PackageReference&apos; to &apos;Microsoft.R9.Extensions.Essentials&apos;).
        /// </summary>
        internal static string ReplaceWithStaticThrowMethod {
            get {
                return ResourceManager.GetString("ReplaceWithStaticThrowMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Seal class.
        /// </summary>
        internal static string SealClass {
            get {
                return ResourceManager.GetString("SealClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifies classes which can be optimized by being sealed.
        /// </summary>
        internal static string SealInternalClassDescription {
            get {
                return ResourceManager.GetString("SealInternalClassDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Seal class &apos;{0}&apos; for improved performance.
        /// </summary>
        internal static string SealInternalClassMessage {
            get {
                return ResourceManager.GetString("SealInternalClassMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Seal non-public classes for improved performance.
        /// </summary>
        internal static string SealInternalClassTitle {
            get {
                return ResourceManager.GetString("SealInternalClassTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A declared type contains members that have data classifications that are not included in the data classifications annotating the declared type. Consider propagating the data classifications from the type&apos;s members to the type itself..
        /// </summary>
        internal static string SensitiveDataClassifierPropagationDescription {
            get {
                return ResourceManager.GetString("SensitiveDataClassifierPropagationDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; contains members with data classifications that are not included on the type itself. Propagate the data classification..
        /// </summary>
        internal static string SensitiveDataClassifierPropagationMessage {
            get {
                return ResourceManager.GetString("SensitiveDataClassifierPropagationMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Propagate data classification.
        /// </summary>
        internal static string SensitiveDataClassifierPropagationTitle {
            get {
                return ResourceManager.GetString("SensitiveDataClassifierPropagationTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply code fix for all issues in &apos;{0}&apos; &apos;{1}&apos;.
        /// </summary>
        internal static string SequentialFixAllFormat {
            get {
                return ResourceManager.GetString("SequentialFixAllFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply code fix for all issues in current solution.
        /// </summary>
        internal static string SequentialFixAllInSolution {
            get {
                return ResourceManager.GetString("SequentialFixAllInSolution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Microsoft.R9.Extensions.Text.StringSplitExtensions.TrySplit&apos; for improved performance.
        /// </summary>
        internal static string SplitDescription {
            get {
                return ResourceManager.GetString("SplitDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Microsoft.R9.Extensions.Text.StringSplitExtensions.TrySplit&apos; for improved performance.
        /// </summary>
        internal static string SplitMessage {
            get {
                return ResourceManager.GetString("SplitMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Microsoft.R9.Extensions.Text.StringSplitExtensions.TrySplit&apos; for improved performance.
        /// </summary>
        internal static string SplitTitle {
            get {
                return ResourceManager.GetString("SplitTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When checking for a single character, prefer the character overloads of &apos;String.StartsWith&apos; and &apos;String.EndsWith&apos; for improved performance.
        /// </summary>
        internal static string StartsEndsWithDescription {
            get {
                return ResourceManager.GetString("StartsEndsWithDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the character-based overload of &apos;{0}&apos;.
        /// </summary>
        internal static string StartsEndsWithMessage {
            get {
                return ResourceManager.GetString("StartsEndsWithMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the character-based overloads of &apos;String.StartsWith&apos; or &apos;String.EndsWith&apos;.
        /// </summary>
        internal static string StartsEndsWithTitle {
            get {
                return ResourceManager.GetString("StartsEndsWithTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make method static.
        /// </summary>
        internal static string StaticMethodDeclarationMessage {
            get {
                return ResourceManager.GetString("StaticMethodDeclarationMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make method static.
        /// </summary>
        internal static string StaticMethodDeclarationTitle {
            get {
                return ResourceManager.GetString("StaticMethodDeclarationTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifies uses of time dependent APIs that can lead to flaky tests.
        /// </summary>
        internal static string StaticTimeDescription {
            get {
                return ResourceManager.GetString("StaticTimeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Microsoft.R9.Extensions.Time.IClock&apos; to make the code easier to test.
        /// </summary>
        internal static string StaticTimeMessage {
            get {
                return ResourceManager.GetString("StaticTimeMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Microsoft.R9.Extensions.Time.IClock&apos; to make the code easier to test.
        /// </summary>
        internal static string StaticTimeTitle {
            get {
                return ResourceManager.GetString("StaticTimeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifies uses of &apos;System.Diagnostics.Stopwatch&apos;.
        /// </summary>
        internal static string StopwatchDescription {
            get {
                return ResourceManager.GetString("StopwatchDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Microsoft.R9.Extensions.Time.PerfStopwatch&apos; instead of &apos;System.Diagnostics.Stopwatch&apos; for improved performance.
        /// </summary>
        internal static string StopwatchMessage {
            get {
                return ResourceManager.GetString("StopwatchMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Microsoft.R9.Extensions.Time.PerfStopwatch&apos; instead of &apos;System.Diagnostics.Stopwatch&apos; for improved performance.
        /// </summary>
        internal static string StopwatchTitle {
            get {
                return ResourceManager.GetString("StopwatchTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifies uses of &apos;String.Format&apos; and &apos;StringBuilder.AppendFormat&apos;.
        /// </summary>
        internal static string StringFormatDescription {
            get {
                return ResourceManager.GetString("StringFormatDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Microsoft.R9.Extensions.Text.CompositeFormat&apos; instead of &apos;string.Format&apos; for improved performance.
        /// </summary>
        internal static string StringFormatMessage {
            get {
                return ResourceManager.GetString("StringFormatMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Microsoft.R9.Extensions.Text.CompositeFormat&apos; instead of &apos;string.Format&apos; for improved performance.
        /// </summary>
        internal static string StringFormatTitle {
            get {
                return ResourceManager.GetString("StringFormatTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recommends replacing explicit argument throwing with the more efficient &apos;Microsoft.R9.Extensions.Diagnostics.Throws&apos; class.
        /// </summary>
        internal static string ThrowsExpressionDescription {
            get {
                return ResourceManager.GetString("ThrowsExpressionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;{0}&apos; to throw the exception instead to improve performance.
        /// </summary>
        internal static string ThrowsExpressionMessage {
            get {
                return ResourceManager.GetString("ThrowsExpressionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the &apos;Microsoft.R9.Extensions.Diagnostics.Throws&apos; class instead of explicitly throwing exception for improved performance.
        /// </summary>
        internal static string ThrowsExpressionTitle {
            get {
                return ResourceManager.GetString("ThrowsExpressionTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recommends replacing explicit argument throwing with the more efficient &apos;Microsoft.R9.Extensions.Diagnostics.Throws&apos; class.
        /// </summary>
        internal static string ThrowsStatementDescription {
            get {
                return ResourceManager.GetString("ThrowsStatementDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;{0}&apos; to throw the exception instead to improve performance.
        /// </summary>
        internal static string ThrowsStatementMessage {
            get {
                return ResourceManager.GetString("ThrowsStatementMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the &apos;Microsoft.R9.Extensions.Diagnostics.Throws&apos; class instead of explicitly throwing exception for improved performance.
        /// </summary>
        internal static string ThrowsStatementTitle {
            get {
                return ResourceManager.GetString("ThrowsStatementTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Microsoft.R9.Extensions.Text.NumericExtensions.ToInvariantString&apos; provides caching for common numeric values, avoiding the need to allocate new strings in many situations.
        /// </summary>
        internal static string ToInvariantStringDescription {
            get {
                return ResourceManager.GetString("ToInvariantStringDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Microsoft.R9.Extensions.Text.NumericExtensions.ToInvariantString&apos; for improved performance.
        /// </summary>
        internal static string ToInvariantStringMessage {
            get {
                return ResourceManager.GetString("ToInvariantStringMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Microsoft.R9.Extensions.Text.NumericExtensions.ToInvariantString&apos; for improved performance.
        /// </summary>
        internal static string ToInvariantStringTitle {
            get {
                return ResourceManager.GetString("ToInvariantStringTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update method parameters for dimensions to be string type.
        /// </summary>
        internal static string UpdateDimensionParamTypesMessage {
            get {
                return ResourceManager.GetString("UpdateDimensionParamTypesMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update method parameters for dimensions to be string type.
        /// </summary>
        internal static string UpdateDimensionParamTypesTitle {
            get {
                return ResourceManager.GetString("UpdateDimensionParamTypesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update return type to be the strong type being created for this metric.
        /// </summary>
        internal static string UpdateReturnTypeMessage {
            get {
                return ResourceManager.GetString("UpdateReturnTypeMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update return type to match metric type.
        /// </summary>
        internal static string UpdateReturnTypeTitle {
            get {
                return ResourceManager.GetString("UpdateReturnTypeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using concrete types avoid virtual or interface call overhead and enables inlining.
        /// </summary>
        internal static string UseConcreteTypeDescription {
            get {
                return ResourceManager.GetString("UseConcreteTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change type of field &apos;{0}&apos; from &apos;{1}&apos; to &apos;{2}&apos; for improved performance.
        /// </summary>
        internal static string UseConcreteTypeForFieldMessage {
            get {
                return ResourceManager.GetString("UseConcreteTypeForFieldMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change type of variable &apos;{0}&apos; from &apos;{1}&apos; to &apos;{2}&apos; for improved performance.
        /// </summary>
        internal static string UseConcreteTypeForLocalMessage {
            get {
                return ResourceManager.GetString("UseConcreteTypeForLocalMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change return type of method &apos;{0}&apos; from &apos;{1}&apos; to &apos;{2}&apos; for improved performance.
        /// </summary>
        internal static string UseConcreteTypeForMethodReturnMessage {
            get {
                return ResourceManager.GetString("UseConcreteTypeForMethodReturnMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change type of parameter &apos;{0}&apos; from &apos;{1}&apos; to &apos;{2}&apos; for improved performance.
        /// </summary>
        internal static string UseConcreteTypeForParameterMessage {
            get {
                return ResourceManager.GetString("UseConcreteTypeForParameterMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use concrete types when possible for improved performance.
        /// </summary>
        internal static string UseConcreteTypeTitle {
            get {
                return ResourceManager.GetString("UseConcreteTypeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use fixed obsolete attribute message format.
        /// </summary>
        internal static string UseObsoleteAttributeMessageFormatTemplate {
            get {
                return ResourceManager.GetString("UseObsoleteAttributeMessageFormatTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All parameters of User Data APIs should be annotated with either UserInputFromRequest or RequestAgnosticAPIParameter attributes.
        /// </summary>
        internal static string UserDataAPIAllParametersAnnotatedDescription {
            get {
                return ResourceManager.GetString("UserDataAPIAllParametersAnnotatedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter {0} on User Data API {1} should be annotated with either UserInputFromRequest if it originates from a Http request, or RequestAgnosticAPIParameter if not.
        /// </summary>
        internal static string UserDataAPIAllParametersAnnotatedMessage {
            get {
                return ResourceManager.GetString("UserDataAPIAllParametersAnnotatedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Annotate all User Data APIs parameters.
        /// </summary>
        internal static string UserDataAPIAllParametersAnnotatedTitle {
            get {
                return ResourceManager.GetString("UserDataAPIAllParametersAnnotatedTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only Request Context members should be passed as parameters to invoke APIs which are annotated as User Data APIs.
        /// </summary>
        internal static string UserInputFromRequestAnalyzerDescription {
            get {
                return ResourceManager.GetString("UserInputFromRequestAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument &apos;{0}&apos; passed to the user data vending API &apos;{1}&apos;&apos;s parameter &apos;{2}&apos; is not an instance of &apos;{3}&apos;.
        /// </summary>
        internal static string UserInputFromRequestAnalyzerMessage {
            get {
                return ResourceManager.GetString("UserInputFromRequestAnalyzerMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument provided for user input parameter on user data vending API is not from any request context.
        /// </summary>
        internal static string UserInputFromRequestAnalyzerTitle {
            get {
                return ResourceManager.GetString("UserInputFromRequestAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use fixed obsolete attribute message format for soft deleted API.
        /// </summary>
        internal static string UseSoftDeleteObsoleteAttributeFormat {
            get {
                return ResourceManager.GetString("UseSoftDeleteObsoleteAttributeFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Encourages optimal use of dictionary lookup.
        /// </summary>
        internal static string UsingExcessiveDictionaryLookupDescription {
            get {
                return ResourceManager.GetString("UsingExcessiveDictionaryLookupDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove excessive dictionary lookups.
        /// </summary>
        internal static string UsingExcessiveDictionaryLookupMessage {
            get {
                return ResourceManager.GetString("UsingExcessiveDictionaryLookupMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove unnecessary dictionary lookups.
        /// </summary>
        internal static string UsingExcessiveDictionaryLookupTitle {
            get {
                return ResourceManager.GetString("UsingExcessiveDictionaryLookupTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Encourages optimal use of set lookup.
        /// </summary>
        internal static string UsingExcessiveSetLookupDescription {
            get {
                return ResourceManager.GetString("UsingExcessiveSetLookupDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove excessive set lookups.
        /// </summary>
        internal static string UsingExcessiveSetLookupMessage {
            get {
                return ResourceManager.GetString("UsingExcessiveSetLookupMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove unnecessary set lookups.
        /// </summary>
        internal static string UsingExcessiveSetLookupTitle {
            get {
                return ResourceManager.GetString("UsingExcessiveSetLookupTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates that code is depending on an experimental API.
        /// </summary>
        internal static string UsingExperimentalApiDescription {
            get {
                return ResourceManager.GetString("UsingExperimentalApiDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is experimental and is subject to change without notice.
        /// </summary>
        internal static string UsingExperimentalApiMessage {
            get {
                return ResourceManager.GetString("UsingExperimentalApiMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using experimental API.
        /// </summary>
        internal static string UsingExperimentalApiTitle {
            get {
                return ResourceManager.GetString("UsingExperimentalApiTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifies issues in a method declaration corresponding to the metric attribute.
        /// </summary>
        internal static string UsingMetricMethodDescription {
            get {
                return ResourceManager.GetString("UsingMetricMethodDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uses of the &apos;Microsoft.Extensions.Caching.StackExchangeRedis&apos; package should be replaced with the &apos;Microsoft.R9.Extensions.Caching.Redis&apos; package.
        /// </summary>
        internal static string UsingMicrosoftExtensionsCachingRedisDescription {
            get {
                return ResourceManager.GetString("UsingMicrosoftExtensionsCachingRedisDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the &apos;Microsoft.R9.Extensions.Caching.Redis&apos; package instead of &apos;Microsoft.Extensions.Caching.StackExchangeRedis&apos;.
        /// </summary>
        internal static string UsingMicrosoftExtensionsCachingRedisMessage {
            get {
                return ResourceManager.GetString("UsingMicrosoftExtensionsCachingRedisMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the &apos;Microsoft.R9.Extensions.Caching.Redis&apos; package instead of &apos;Microsoft.Extensions.Caching.StackExchangeRedis&apos;.
        /// </summary>
        internal static string UsingMicrosoftExtensionsCachingRedisTitle {
            get {
                return ResourceManager.GetString("UsingMicrosoftExtensionsCachingRedisTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifies calls to the &apos;ToString&apos; method as arguments to an R9 logging method.
        /// </summary>
        internal static string UsingToStringInLoggersDescription {
            get {
                return ResourceManager.GetString("UsingToStringInLoggersDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a logging method that accepts an instance of the object instead of a string.
        /// </summary>
        internal static string UsingToStringInLoggersMessage {
            get {
                return ResourceManager.GetString("UsingToStringInLoggersMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Perform message formatting in the body of the logging method.
        /// </summary>
        internal static string UsingToStringInLoggersTitle {
            get {
                return ResourceManager.GetString("UsingToStringInLoggersTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using &apos;System.ValueTuple&apos; avoids allocations and is generally more efficient than &apos;System.Tuple&apos;.
        /// </summary>
        internal static string ValueTupleDescription {
            get {
                return ResourceManager.GetString("ValueTupleDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;System.ValueTuple&apos; instead of &apos;System.Tuple&apos; for improved performance.
        /// </summary>
        internal static string ValueTupleMessage {
            get {
                return ResourceManager.GetString("ValueTupleMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;System.ValueTuple&apos; instead of &apos;System.Tuple&apos; for improved performance.
        /// </summary>
        internal static string ValueTupleTitle {
            get {
                return ResourceManager.GetString("ValueTupleTitle", resourceCulture);
            }
        }
    }
}
